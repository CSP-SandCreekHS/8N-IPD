--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): Team bob is cool, Destroy
        trust if they trust, otherwise destroy
Player 1 (P1): LEAGUE OF DRRRRRRRAAAAAAVEN, The name the team gives to this strategy
        How does this strategy decide?
Player 2 (P2): Chessica, Jessica and Chessa
        Undecided
Player 3 (P3): Poogie Master, Random, based on opponents recent history
        Random, but influenced by their choice
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3
vs. P0 :      0   -152    100   -176
vs. P1 :     25      0     19    -58
vs. P2 :    100   -149      0     65
vs. P3 :     87     41     34      0
TOTAL  :    212   -260    153   -169
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
Team bob i(P0):         53 points with Destroy                                 
Chessica  (P2):         38 points with Jessica and Chessa                      
Poogie Mas(P3):        -43 points with Random, based on opponents recent histor
LEAGUE OF (P1):        -65 points with The name the team gives to this strategy
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team2--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Team bob is cool' # Only 10 chars displayed.
strategy_name = 'Destroy'
strategy_description = 'trust if they trust, otherwise destroy'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    if len(my_history) == 0:
        return 'c'
    if my_history[-1] == 'c' and their_history[-1] == 'c':
        return 'c'
    if my_history[-1] == 'c' and their_history[-1] == 'b':
        return 'b'
    if my_history[-1] == 'b' and their_history[-1] == 'c':
        return 'b'
    if my_history[-1] == 'b' and their_history[-1] == 'b':
        return 'b'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team3--------------------------------------------------------------------------------
import random
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####


team_name = 'LEAGUE OF DRRRRRRRAAAAAAVEN' # Only 10 chars displayed.
strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    

    RI = random.randint(0,100)
       
    if RI <= 35:
        return 'c'
    else:
        return 'b'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='c'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=-500, 
              their_score=0,
              result='c')             --------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Chessica' # Only 10 chars displayed.
strategy_name = 'Jessica and Chessa'
strategy_description = 'Undecided'

    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    if len(my_history) == 0:
        return 'c'
    elif my_history[-1]=='c' and their_history[-1]=='b':
        return 'b'
    if their_history[0] == 'b':
        return 'b'
    if my_score < -500:
        return 'b'
    if their_history[0] == 'c':
        return 'c'
    if my_score > 700:
        return 'b'
    
    
--------------------------------------------------------------------------------
team6--------------------------------------------------------------------------------
import random
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Poogie Master' # Only 10 chars displayed.
strategy_name = 'Random, based on opponents recent history'
strategy_description = 'Random, but influenced by their choice'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    cs = 0
    bs = 1
    if len(their_history) > 11:
        recenHist = their_history[-11:]
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    for char in their_history:
        if char == 'c':
            cs += 1
        else:
            bs += 1
    if cs or bs >= 0:
        theirChoice = (cs / (cs + bs)) * 100
        yourChoice = random.randint(1,100)
        if my_score <= their_score:
            theirChoice -= 20
        if my_score or their_score >= 0:
            theirChoice += 75
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    if my_history == '':
        return 'c'
    else:
        if yourChoice >= theirChoice:
            return 'b'
        else:
            return 'c'

def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
Section 3 - Game Data for Team Team bob is cool
--------------------------------------------------------------------------------
25 pt/round: Team bob is cool(P0) "Destroy"
-152 pt/round: LEAGUE OF DRRRRRRRAAAAAAVEN(P1) "The name the team gives to this strategy"
cbbBbBbbBbbbBbbbbBbbbBbBbbBbBBbbbBBbbbBbBbbBBbbbBbBbbbBbBBbbBbbbbbbBbbbbbbBbBbBb
Bbbcbcbbcbbbcbbbbcbbbcbcbbcbccbbbccbbbcbcbbccbbbcbcbbbcbccbbcbbbbbbcbbbbbbcbcbcb

bbBBBBBbBbbBbbbBbbbbbBBbBbBBbbBBBbbbbBBbBbbbbbbbbBbBbbbBBbbBbBbB
bbcccccbcbbcbbbcbbbbbccbcbccbbcccbbbbccbcbbbbbbbbcbcbbbccbbcbcbc

--------------------------------------------------------------------------------
100 pt/round: Team bob is cool(P0) "Destroy"
100 pt/round: Chessica(P2) "Jessica and Chessa"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
87 pt/round: Team bob is cool(P0) "Destroy"
-176 pt/round: Poogie Master(P3) "Random, based on opponents recent history"
CCcBbBBbBbbBBBbbbBbBBBBBBbbBBBbbBbBBbbBbbBBBBBbBBbBbBBbbBbBBbbBBBBBbbbbBBBbbbBbb
CCBcbccbcbbcccbbbcbccccccbbcccbbcbccbbcbbcccccbccbcbccbbcbccbbcccccbbbbcccbbbcbb

bBBBBbBbBbbbBBbBbBbBBbbbBbbBBBbbbBBBbbbBBbbBBBBbBBBbbbBbbBbbbbbbbbbBBBBBbBBBBbbB
bccccbcbcbbbccbcbcbccbbbcbbcccbbbcccbbbccbbccccbcccbbbcbbcbbbbbbbbbcccccbccccbbc

bbBBBbBBBBbbBBB
bbcccbccccbbccc

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team LEAGUE OF DRRRRRRRAAAAAAVEN
--------------------------------------------------------------------------------
-152 pt/round: LEAGUE OF DRRRRRRRAAAAAAVEN(P1) "The name the team gives to this strategy"
25 pt/round: Team bob is cool(P0) "Destroy"
Bbbcbcbbcbbbcbbbbcbbbcbcbbcbccbbbccbbbcbcbbccbbbcbcbbbcbccbbcbbbbbbcbbbbbbcbcbcb
cbbBbBbbBbbbBbbbbBbbbBbBbbBbBBbbbBBbbbBbBbbBBbbbBbBbbbBbBBbbBbbbbbbBbbbbbbBbBbBb

bbcccccbcbbcbbbcbbbbbccbcbccbbcccbbbbccbcbbbbbbbbcbcbbbccbbcbcbc
bbBBBBBbBbbBbbbBbbbbbBBbBbBBbbBBBbbbbBBbBbbbbbbbbBbBbbbBBbbBbBbB

--------------------------------------------------------------------------------
-149 pt/round: LEAGUE OF DRRRRRRRAAAAAAVEN(P1) "The name the team gives to this strategy"
19 pt/round: Chessica(P2) "Jessica and Chessa"
Bbbbbcbbbbbbcbcbbbcbbbcbbbcccbccbcbbbcbbbbbcbbbbccbcbcbbbbbbbcccbbbbbccbbbccbcbb
cbbbbBbbbbbbBbBbbbBbbbBbbbBBBbBBbBbbbBbbbbbBbbbbBBbBbBbbbbbbbBBBbbbbbBBbbbBBbBbb

cbccbbcbbccbbbcbbbcbcccb
BbBBbbBbbBBbbbBbbbBbBBBb

--------------------------------------------------------------------------------
41 pt/round: LEAGUE OF DRRRRRRRAAAAAAVEN(P1) "The name the team gives to this strategy"
-58 pt/round: Poogie Master(P3) "Random, based on opponents recent history"
BBbBCbbbbBcbBcBBCCBBBBCCbcBBCBcBbbBcbbcBbcBCBCcBbbbbBbBBbcCbbcbbbcBbBBBcbbbBBCcb
ccbcCbbbbcBbcBccCCccccCCbBccCcBcbbcBbbBcbBcCcCBcbbbbcbccbBCbbBbbbBcbcccBbbbccCBb

bBCccbBcbCBCCbcCCBCBCBBbcBbbBcbbCCCBBCBBCbcccBbBCBbbCCBCBbBCBBcBCcBBbbcCBbbBcBCB
bcCBBbcBbCcCCbBCCcCcCccbBcbbcBbbCCCccCccCbBBBcbcCcbbCCcCcbcCccBcCBccbbBCcbbcBcCc

BCBcccBBBBbC
cCcBBBccccbC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Chessica
--------------------------------------------------------------------------------
100 pt/round: Chessica(P2) "Jessica and Chessa"
100 pt/round: Team bob is cool(P0) "Destroy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
19 pt/round: Chessica(P2) "Jessica and Chessa"
-149 pt/round: LEAGUE OF DRRRRRRRAAAAAAVEN(P1) "The name the team gives to this strategy"
cbbbbBbbbbbbBbBbbbBbbbBbbbBBBbBBbBbbbBbbbbbBbbbbBBbBbBbbbbbbbBBBbbbbbBBbbbBBbBbb
Bbbbbcbbbbbbcbcbbbcbbbcbbbcccbccbcbbbcbbbbbcbbbbccbcbcbbbbbbbcccbbbbbccbbbccbcbb

BbBBbbBbbBBbbbBbbbBbBBBb
cbccbbcbbccbbbcbbbcbcccb

--------------------------------------------------------------------------------
34 pt/round: Chessica(P2) "Jessica and Chessa"
65 pt/round: Poogie Master(P3) "Random, based on opponents recent history"
CCcBCcBcBCcbcBCCCCCCCCCCCCCCCCcBcbCcBCCcBCCCCCcBCcBCCcbCCcBcBCcbCcBCCCCCCCCCcbcB
CCBcCBcBcCBbBcCCCCCCCCCCCCCCCCBcBbCBcCCBcCCCCCBcCBcCCBbCCBcBcCBbCBcCCCCCCCCCBbBc

CCCcbcBCCCCCcbCcBCcBCCCCCCcBCC
CCCBbBcCCCCCBbCBcCBcCCCCCCBcCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Poogie Master
--------------------------------------------------------------------------------
-176 pt/round: Poogie Master(P3) "Random, based on opponents recent history"
87 pt/round: Team bob is cool(P0) "Destroy"
CCBcbccbcbbcccbbbcbccccccbbcccbbcbccbbcbbcccccbccbcbccbbcbccbbcccccbbbbcccbbbcbb
CCcBbBBbBbbBBBbbbBbBBBBBBbbBBBbbBbBBbbBbbBBBBBbBBbBbBBbbBbBBbbBBBBBbbbbBBBbbbBbb

bccccbcbcbbbccbcbcbccbbbcbbcccbbbcccbbbccbbccccbcccbbbcbbcbbbbbbbbbcccccbccccbbc
bBBBBbBbBbbbBBbBbBbBBbbbBbbBBBbbbBBBbbbBBbbBBBBbBBBbbbBbbBbbbbbbbbbBBBBBbBBBBbbB

bbcccbccccbbccc
bbBBBbBBBBbbBBB

--------------------------------------------------------------------------------
-58 pt/round: Poogie Master(P3) "Random, based on opponents recent history"
41 pt/round: LEAGUE OF DRRRRRRRAAAAAAVEN(P1) "The name the team gives to this strategy"
ccbcCbbbbcBbcBccCCccccCCbBccCcBcbbcBbbBcbBcCcCBcbbbbcbccbBCbbBbbbBcbcccBbbbccCBb
BBbBCbbbbBcbBcBBCCBBBBCCbcBBCBcBbbBcbbcBbcBCBCcBbbbbBbBBbcCbbcbbbcBbBBBcbbbBBCcb

bcCBBbcBbCcCCbBCCcCcCccbBcbbcBbbCCCccCccCbBBBcbcCcbbCCcCcbcCccBcCBccbbBCcbbcBcCc
bBCccbBcbCBCCbcCCBCBCBBbcBbbBcbbCCCBBCBBCbcccBbBCBbbCCBCBbBCBBcBCcBBbbcCBbbBcBCB

cCcBBBccccbC
BCBcccBBBBbC

--------------------------------------------------------------------------------
65 pt/round: Poogie Master(P3) "Random, based on opponents recent history"
34 pt/round: Chessica(P2) "Jessica and Chessa"
CCBcCBcBcCBbBcCCCCCCCCCCCCCCCCBcBbCBcCCBcCCCCCBcCBcCCBbCCBcBcCBbCBcCCCCCCCCCBbBc
CCcBCcBcBCcbcBCCCCCCCCCCCCCCCCcBcbCcBCCcBCCCCCcBCcBCCcbCCcBcBCcbCcBCCCCCCCCCcbcB

CCCBbBcCCCCCBbCBcCBcCCCCCCBcCC
CCCcbcBCCCCCcbCcBCcBCCCCCCcBCC

--------------------------------------------------------------------------------
